using GameLib;
using SFML.System;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GameProject
{
    public class GameSceneOverlay
    {
        FragmentArray fragments;
        TileMap<SpriteEntity> tileMap;
        int[,] tileArray;

        const int scaling = 3;
        const int tileSize = 16 * scaling;
        Vector2f scalingVector = new Vector2f(scaling, scaling);

        public GameSceneOverlay()
        {
            fragments = FragmentArray.Create("../../../Resource/FarmTileSet3.png", 16, 16, 13, 13 * 13);

            tileArray = new int[15, 27]
            {
                {97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
                {97, 97, 86, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 143, 144, 89, 151, 152, 149, 150, 145, 146, 90},
                {97, 97, 98, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 156, 157, 168, 164, 165, 162, 163, 158, 159, 98},
                {97, 97, 98, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 98, 168, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 98, 168, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 98, 168, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 98, 168, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 151, 152, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 164, 165, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 149, 150, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 162, 163, 168, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 128, 154, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 145, 146, 168, 168, 168, 168, 168, 168, 141, 153, 168, 168, 168, 168, 168, 141, 153, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 158, 159, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 98},
                {97, 97, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 103}
            };

            tileMap = new TileMap<SpriteEntity>(tileSize, tileArray, CreateTile);
        }

        public TileMap<SpriteEntity> GetTileMap() { return tileMap; }

        private SpriteEntity CreateTile(int tileCode)
        {
            var fragment = fragments.Fragments[tileCode];
            var sprite = new SpriteEntity(fragment);
            sprite.Origin = new Vector2f(tileSize / scaling / 2, tileSize / scaling / 2);
            sprite.Scale = scalingVector;
            return sprite;
        }
    }
}
